#!/usr/bin/env bun

import { mkdir, readFile, rm } from "node:fs/promises";
import path from 'path';
import { spawn } from 'bun';
import semver from 'semver';
import log from 'colored-terminal'
import { intro, outro, select, spinner, isCancel } from '@clack/prompts';
import { existsSync } from 'fs';

const __filename = import.meta.file;
const __dirname = import.meta.dir;

const MINIMUM_VERSION = '0.0.5';

async function checkVersion() {
  try {
    const packageJsonPath = path.join(__dirname, 'package.json');
    const packageJsonContent = await readFile(packageJsonPath, 'utf-8');
    const { version } = JSON.parse(packageJsonContent);

    if (semver.lt(version, MINIMUM_VERSION)) {
      log.yellow('───────────────────────────────────────────────────');
      log.warn('An outdated version of generate-reactive-app was detected.');
      log.yellow(`Your version: ${version}`);
      log.yellow(`Minimum recommended version: ${MINIMUM_VERSION}`);
      log.yellow('Clearing cache and updating...');

      const s = spinner();
      s.start('Clearing cache');

      try {
        // Clear bunx cache
        const clearBunxCache = spawn(['bun', 'pm', 'cache', 'rm']);
        await clearBunxCache.exited;

        // Clear npx cache
        const clearNpxCache = spawn(['npm', 'cache', 'clean', '--force']);
        await clearNpxCache.exited;

        s.stop('Cache cleared successfully');

        // Re-run the current script with the same arguments
        const updatedScript = spawn(['bunx', 'generate-reactive-app', ...process.argv.slice(2)], {
          stdio: 'inherit'
        });

        await updatedScript.exited;
        process.exit(0);
      } catch (error) {
        s.stop('Failed to clear cache');
        console.error('Error clearing cache:', error);
        process.exit(1);
      }
    }
  } catch (error) {
    console.error('Failed to check version:', error);
  }
}

const projectFiles = {
  'tsconfig.json': JSON.stringify({
    compilerOptions: {
      target: "ESNext",
      module: "ESNext",
      moduleResolution: "Node",
      jsx: "preserve",
      strict: true,
      esModuleInterop: true,
      skipLibCheck: true,
      forceConsistentCasingInFileNames: true
    },
    include: ["src"],
    exclude: ["node_modules"]
  }, null, 2),
  'public/index.html': `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Reactive App</title>
</head>
<body>
  <div app></div>
  <script type="module" src="../index.ts"></script>
</body>
</html>`,
  'index.ts': `import { initiateApp } from "reactive-js";

initiateApp();
`,
  'src/routes/index.tsx': `import Reactive from "reactive-js";

export default () => {
  return (
    <div>
      <h1>Welcome to your Reactive App!</h1>
      <p>This app was generated by <code>create-reactive-app</code>.</p>
    </div>
  );
};
`,
};

const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function createProject(projectName) {
  const projectRoot = projectName === '.' ? process.cwd() : path.join(process.cwd(), projectName);
  
  intro(`Creating a new Reactive app in ${projectRoot}`);

  if (existsSync(path.join(projectRoot, 'package.json'))) {
    const action = await select({
      message: 'A project already exists in this directory. What would you like to do?',
      options: [
        { value: 'overwrite', label: 'Overwrite the existing project' },
        // { value: 'convert', label: 'Convert the existing project to a Reactive app' },
        { value: 'cancel', label: 'Cancel the operation' },
      ],
    });

    if (isCancel(action) || action === 'cancel') {
      outro('Operation cancelled.');
      process.exit(0);
    }

    if (action === 'overwrite') {
      const s = spinner();
      s.start('Removing existing project');
      await rm(projectRoot, { recursive: true, force: true });
      await mkdir(projectRoot, { recursive: true });
      s.stop('Existing project removed');
    } else if (action === 'convert') {
      await convertToReactiveApp(projectRoot);
      outro('Project converted to Reactive app. Please review the changes.');
      process.exit(0);
    }
  }

  const s = spinner();
  s.start('Creating project structure');
  await mkdir(projectRoot, { recursive: true });
  await mkdir(path.join(projectRoot, 'src/routes'), { recursive: true });
  await mkdir(path.join(projectRoot, 'public'), { recursive: true });
  s.stop('Project structure created');

  const packageJson = {
    name: path.basename(projectRoot),
    version: "1.0.0",
    private: true,
    scripts: {
      dev: "reactive dev",
      test: "reactive test",
      build: "reactive build",
      start: "reactive start"
    },
    dependencies: {
      "@tco/reactivejs": "latest",
    },
    devDependencies: {
      typescript: "^4.0.0",
      "@types/bun": "latest"
    }
  };

  s.start('Creating package.json');
  await Bun.write(path.join(projectRoot, 'package.json'), JSON.stringify(packageJson, null, 2));
  s.stop('package.json created');

  s.start('Creating project files');
  for (const [filePath, fileContent] of Object.entries(projectFiles)) {
    const fullPath = path.join(projectRoot, filePath);
    await Bun.write(fullPath, fileContent);
    await sleep(200);
  }
  s.stop('Project files created');

  s.start('Installing dependencies');
  try {
    const install = spawn(['bun', 'install'], {
      cwd: projectRoot,
      stdio: ['ignore', 'ignore', 'inherit']
    });

    await install.exited;
    s.stop('Dependencies installed');
  } catch (error) {
    s.stop('Failed to install dependencies');
    console.error(error);
  }

  outro('Project created and set up successfully!');

  log.magenta('┌' + '─'.repeat(50) + '┐');
  log.magenta(`  Next Steps:                                      `);
  log.default(`                                                   `);
  log.magenta(`  1. cd ${projectName}                             `);
  log.magenta(`  2. bun run dev                                   `);
  log.magenta('└' + '─'.repeat(50) + '┘');
}

async function main() {
  await checkVersion();

  const [,, projectName = '.'] = process.argv;

  if (!projectName) {
    console.error('Please specify the project name or use "." for the current directory.');
    process.exit(1);
  }

  createProject(projectName);
}

main();

async function convertToReactiveApp(projectRoot) {
  const s = spinner();
  s.start('Converting project to Reactive app');

  // Read existing package.json
  const packageJsonPath = path.join(projectRoot, 'package.json');
  const packageJsonContent = await readFile(packageJsonPath, 'utf-8');
  let packageJson = JSON.parse(packageJsonContent);

  // List of frameworks to remove
  const frameworksToRemove = ['react', 'react-dom', 'svelte', 'next', 'solid-js', 'vue'];

  // Remove previous frameworks from dependencies and devDependencies
  for (const framework of frameworksToRemove) {
    delete packageJson.dependencies?.[framework];
    delete packageJson.devDependencies?.[framework];
    // Also remove framework-specific types
    delete packageJson.devDependencies?.[`@types/${framework}`];
  }

  // Update package.json
  packageJson.dependencies = {
    ...(packageJson.dependencies || {}),
    reactivejs: "^1.0.0",
  };

  packageJson.devDependencies = {
    ...(packageJson.devDependencies || {}),
    typescript: "^4.0.0"
  };

  packageJson.scripts = {
    ...(packageJson.scripts || {}),
    start: "bun run index.ts",
  };

  // Write updated package.json
  await Bun.write(packageJsonPath, JSON.stringify(packageJson, null, 2));

  // Create necessary directories
  await mkdir(path.join(projectRoot, 'src'), { recursive: true });

  // Create Reactive-specific files
  for (const [filePath, fileContent] of Object.entries(projectFiles)) {
    if (!existsSync(path.join(projectRoot, filePath))) {
      await Bun.write(path.join(projectRoot, filePath), fileContent);
    }
  }

  s.stop('Project converted to Reactive app');

  log.default('\nProject has been converted to a Reactive app. Please review the changes in package.json and other files.');
  log.default('You may need to manually remove or update some files specific to your previous framework.');
  log.default('\nNext steps:');
  log.default('1. Review the changes in package.json and other files');
  log.default('2. Run `bun install` to update dependencies');
  log.default('3. Update your code to use Reactive.js');
  log.default('4. Run `bun run start` to start your app');
}
